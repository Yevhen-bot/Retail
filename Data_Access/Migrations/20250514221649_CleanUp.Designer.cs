// <auto-generated />
using System;
using System.Collections.Generic;
using Data_Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250514221649_CleanUp")]
    partial class CleanUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BuildingClient", b =>
                {
                    b.Property<int>("BuildingsId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.HasKey("BuildingsId", "ClientsId");

                    b.HasIndex("ClientsId");

                    b.ToTable("BuildingClient");
                });

            modelBuilder.Entity("Data_Access.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Adress", "Data_Access.Entities.Building.Adress#Adress", b1 =>
                        {
                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("varchar(40)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("varchar(40)")
                                .HasColumnName("Country");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("varchar(4)")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Role", "Data_Access.Entities.Building.Role#BuildingRole", b1 =>
                        {
                            b1.Property<string>("RoleName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Role");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Data_Access.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(65,30)");

                    b.ComplexProperty<Dictionary<string, object>>("Age", "Data_Access.Entities.Client.Age#Age", b1 =>
                        {
                            b1.Property<DateOnly>("BirhtDate")
                                .HasColumnType("date")
                                .HasColumnName("BirthDate");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Data_Access.Entities.Client.Email#Email", b1 =>
                        {
                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Data_Access.Entities.Client.Name#Name", b1 =>
                        {
                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Salary", "Data_Access.Entities.Client.Salary#Salary", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Salary");
                        });

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data_Access.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data_Access.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Data_Access.Entities.Owner.Email#Email", b1 =>
                        {
                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Data_Access.Entities.Owner.Name#Name", b1 =>
                        {
                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("LastName");
                        });

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Data_Access.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ComplexProperty<Dictionary<string, object>>("Age", "Data_Access.Entities.Worker.Age#Age", b1 =>
                        {
                            b1.Property<DateOnly>("BirhtDate")
                                .HasColumnType("date")
                                .HasColumnName("BirthDate");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Data_Access.Entities.Worker.Email#Email", b1 =>
                        {
                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ExaustionLevel", "Data_Access.Entities.Worker.ExaustionLevel#ExhaustionLevel", b1 =>
                        {
                            b1.Property<double>("Level")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("ExaustionLevel");

                            b1.Property<double>("Progression")
                                .HasColumnType("double");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HomeAdress", "Data_Access.Entities.Worker.HomeAdress#Adress", b1 =>
                        {
                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("varchar(40)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("varchar(40)")
                                .HasColumnName("Country");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("varchar(4)")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Data_Access.Entities.Worker.Name#Name", b1 =>
                        {
                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Role", "Data_Access.Entities.Worker.Role#Role", b1 =>
                        {
                            b1.Property<string>("RoleName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Role");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Salary", "Data_Access.Entities.Worker.Salary#Salary", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Salary");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("BuildingClient", b =>
                {
                    b.HasOne("Data_Access.Entities.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data_Access.Entities.Building", b =>
                {
                    b.HasOne("Data_Access.Entities.Owner", "Owner")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Data_Access.Wrappers.ProductWrapper", "Products", b1 =>
                        {
                            b1.Property<int>("BuildingId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("MPU")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("MetersPerUnit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ProductName");

                            b1.Property<double>("Price")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("ProductPrice");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("BuildingId", "Id");

                            b1.ToTable("Building_Products", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BuildingId");
                        });

                    b.Navigation("Owner");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data_Access.Entities.Client", b =>
                {
                    b.OwnsMany("Data_Access.Wrappers.ProductWrapper", "Preferences", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("MPU")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("MetersPerUnit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ProductName");

                            b1.Property<double>("Price")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("ProductPrice");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("ClientId", "Id");

                            b1.ToTable("Preferences", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("Data_Access.Entities.Order", b =>
                {
                    b.HasOne("Data_Access.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Data_Access.Wrappers.ProductWrapper", "Products", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<double>("MPU")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("MetersPerUnit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ProductName");

                            b1.Property<double>("Price")
                                .HasPrecision(18, 2)
                                .HasColumnType("double")
                                .HasColumnName("ProductPrice");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("OrderId", "Id");

                            b1.ToTable("Order_Products", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Client");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data_Access.Entities.Worker", b =>
                {
                    b.HasOne("Data_Access.Entities.Building", "Building")
                        .WithMany("Workers")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Data_Access.Entities.Building", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Data_Access.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Data_Access.Entities.Owner", b =>
                {
                    b.Navigation("Buildings");
                });
#pragma warning restore 612, 618
        }
    }
}
